const bcrypt = require("bcrypt");
let config = require("../config/database"),
  jwt = require("jsonwebtoken");
const { validationResult } = require("express-validator/check");
const User = require("../models/user");

exports.register = async (req, res) => {
  try {
    const errors = validationResult(req); //catch any errors that were generated by express-validator

    if (!req.body.email || !req.body.password) {
      res.json({ success: false, msg: "Please pass email and password." });
    }
    if (!errors.isEmpty()) {
      res.status(400).json({ message: errors.array() });
    } else {
      const existingUser = await User.findOne({ email: req.body.email });
      if (existingUser) {
        res.status(400).json({ success: false, msg: "Email already exists" });
      } else {
        bcrypt.hash(req.body.password, 10, (err, hash) => {
          if (err) {
            res.status(500).json({ message: "Error hasing password" });
          }
          let newUser = new User({
            email: req.body.email,
            password: req.body.password,
          });

          newUser.save();
          res.json({
            success: true,
            msg: "Successful created new user.",
            user: { id: newUser._id, email: newUser.email },
          });
        });
      }
    }
  } catch (err) {
    console.log(err);
    res.status(500).json({ success: false, msg: "Server Error" });
  }
};

exports.login = async (req, res) => {
  try {
    const errors = validationResult(req); //catch any errors that were generated by express-validator
    if (!errors.isEmpty()) {
      res.status(400).json({ message: errors.array() });
    } else {
      User.findOne({ email: req.body.email })
        .then((user) => {
          if (!user) {
            res.status(401).send({
              success: false,
              msg: "Authentication failed. User not found.",
            });
          } else {
            bcrypt.compare(
              req.body.password,
              user.password,
              function (err, isMatch) {
                // check if password matches
                if (isMatch && !err) {
                  let token = jwt.sign({ id: user._id }, config.secret); // if user is found and password is right create a token
                  res.json({ success: true, jwt: token }); // return the information including token as JSON
                } else {
                  res.status(401).send({
                    success: false,
                    msg: "Authentication failed. Wrong password.",
                  });
                }
              }
            );
          }
        })
        .catch((err) => {
          console.log(err);
        });
    }
  } catch (err) {
    console.log(err);
    res.status(500).json({ success: false, msg: "Server Error" });
  }
};
exports.getUser = (req, res) => {
  let token = getToken(req.headers);
  if (token) {
    User.findById(req.user._id)
      .then((user) => {
        if (!user) {
          res.status(401).json({ message: "Error: User Not found" });
          return;
        }
        res.status(200).json({ user: { id: user._id, email: user.email } });
      })
      .catch((err) => {
        res.status(400).json({ message: "Eror " + err });
      });
  } else {
    return res.status(403).send({ success: false, msg: "Unauthorized." });
  }
};

getToken = function (headers) {
  if (headers && headers.authorization) {
    let parted = headers.authorization.split(" ");
    if (parted.length === 2) {
      return parted[1];
    } else {
      return null;
    }
  } else {
    return null;
  }
};
